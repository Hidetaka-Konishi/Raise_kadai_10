AWSTemplateFormatVersion: "2010-09-09"
Description: "RDS"

Parameters:
  RandomName:
    Type: String
  # VPCのRandomNameで記入した文字を記入する
  VPCName:
    Type: String

Resources:
    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        DeletionPolicy: Delete
        UpdateReplacePolicy: Delete
        Properties:
            DBInstanceIdentifier: !Sub ${RandomName}-rds
            AllocatedStorage: "20"
            DBInstanceClass: "db.t3.micro"
            Engine: "mysql"
            MasterUsername: "admin"
            MasterUserPassword: '{{resolve:ssm-secure:picture-apload:1}}'
            PreferredBackupWindow: "08:19-08:49"
            BackupRetentionPeriod: 1
            AvailabilityZone: !Sub "${AWS::Region}b"
            PreferredMaintenanceWindow: "mon:03:52-mon:04:22"
            MultiAZ: false
            EngineVersion: "8.0.33"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: false
            StorageType: "gp2"
            Port: "3306"
            StorageEncrypted: true
            KmsKeyId: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/623421e8-f259-4d7f-9b9b-f8bc1921d999"
            CopyTagsToSnapshot: true
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: !Ref RDSDBSubnetGroup
            VPCSecurityGroups: 
              - !Ref EC2SecurityGroup2
              - !Ref EC2SecurityGroup
            DBParameterGroupName: "default.mysql8.0"
            OptionGroupName: "default:mysql-8-0"
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "subnetgroup"
            DBSubnetGroupName: !Sub ${RandomName}-subnet-group
            SubnetIds: 
              - !Sub "{{resolve:ssm:/${VPCName}/EC2SubnetId}}"
              - !Sub "{{resolve:ssm:/${VPCName}/EC2Subnet2Id}}"
              - !Sub "{{resolve:ssm:/${VPCName}/EC2Subnet3Id}}"
              - !Sub "{{resolve:ssm:/${VPCName}/EC2Subnet4Id}}"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "securitygroup"
            GroupName: !Sub ${RandomName}-ec2-rds-alb-security
            VpcId: !Sub "{{resolve:ssm:/${VPCName}/VPC-ID}}"
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "59.87.81.226/32"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "securitygroup2"
            VpcId: !Sub "{{resolve:ssm:/${VPCName}/VPC-ID}}"
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "3306rule"
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306

    EC2SecurityGroupParameter:
        Type: "AWS::SSM::Parameter"
        Properties: 
          Name: !Sub "/${RandomName}/EC2-SecurityGroup"
          Type: "String"
          Value: !Ref EC2SecurityGroup

    EC2SecurityGroup2Parameter:
        Type: "AWS::SSM::Parameter"
        Properties: 
          Name: !Sub "/${RandomName}/EC2-SecurityGroup2"
          Type: "String"
          Value: !Ref EC2SecurityGroup2